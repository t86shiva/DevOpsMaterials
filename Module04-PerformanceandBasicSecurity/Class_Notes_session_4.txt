## Perforamance Tuning guide for Window Server 2012 R2
https://msdn.microsoft.com/en-us/library/windows/hardware/dn529133(v=vs.85).aspx
# CPU INO 
  cat /proc/cpuinfo
  grep "model name" /proc/cpuinfo  
 sysctl -n machdep.cpu.brand_string 
#### IMportant SYSCTL commands
# List all parameters
sysctl -a
# Intro
#network 
# Io 
# Memory 
#Changing disk Schedulers
#CFQ (Completely Fair Queuing) promotes I/O coming from real time processes and uses historical data to anticipate whether an application will issue more I/O requests in the near future (causing a slight tendency to idle).
#Deadline attempts to provide a guaranteed latency for requests and is particularly suitable when read operations occur more often than write operations (one queue for reads and one for writes, I/Os are dispatched based on time spent in queue).
#Noop implements a simple FIFO (first-in first-out) scheduling algorithm with minimal CPU cost.
# set at boot time... 
grubby --update-kernel=ALL --args="elevator=cfq"
## or altternativel
#Edit: /etc/default/grub
#Add "elevator=noop" to the GRUB_CMDLINE_LINUX_DEFAULT line.
sudo update-grub
more /sys/block/sda/queue/scheduler
#noop deadline [cfq]
echo deadline > /sys/block/sda/queue/scheduler
more /sys/block/sda/queue/scheduler
#noop [deadline] cfq
# make this permanent
#chmod u+x /etc/rc.d/rc.local
#systemctl start rc-local
# see link: http://stackoverflow.com/questions/1009577/selecting-a-linux-i-o-scheduler 
Tunables for a deadline scheduler....

#fifo_batch
This determines the number of reads or writes to issue in a single batch. The default is 16. Setting this to a higher value may result in better throughput, but will also increase latency.
#front_merges
You can set this tunable to 0 if you know your workload will never generate front merges. Unless you have measured the overhead of this check, it is advisable to leave it at its default setting (1).
#read_expire
This tunable allows you to set the number of milliseconds in which a read request should be serviced. By default, this is set to 500 ms (half a second).
#write_expire
This tunable allows you to set the number of milliseconds in which a write request should be serviced. By default, this is set to 5000 ms (five seconds).
#writes_starved
This tunable controls how many read batches can be processed before processing a single write batch. The higher this is set, the more preference is given to reads.

#### Network
#change files. 
sysctl fs.file-nr
#fs.file-nr = 7343 2043 8192
#The fs.file-nr variable displays three parameters: total allocated file handles, currently used file handles, and maximum file handles that can be allocated. 
sysctl -w fs.file-max="32768"

#set tcp_fin_timeout
net.ipv4.tcp_fin_timeoutnetstat -nt
#In Unix, half-open connections are placed in the incomplete (or backlog) connections queue, and under Linux, the amount of space available in this queue is specified by ipv4.tcp_max_syn_backlog. It's important to realize that each half-open connection consumes memory. Also, realize that a common Denial of Service attack, the syn-flood attack, is based on the knowledge that your server will no longer be able to serve new connection requests if an attacker opens enough half-open connections. If you are running a site that does need to handle a large number of half-open connections, then consider increasing this value:
# sysctl -w net.ipv4.tcp_max_syn_backlog="1024"
net.ipv4.tcp_max_syn_backlog = 1024

#As a side note, many administrators also enable syn-cookies, which enable a server to handle new connections even when the incomplete connections queue is full (e.g., during a syn-flood attack):

# sysctl -w net.ipv4.tcp_syncookies="1"
net.ipv4.tcp_syncookies = 1
# You cannot use Windows scaling... 


# sysctl net.ipv4.tcp_keepalive_time
net.ipv4.tcp_keepalive_time = 7200
# sysctl -w net.ipv4.tcp_keepalive_time="1800"
net.ipv4.tcp_keepalive_time = 1800

#review net.ipv4.tcp_keepalive_probes and net.ipv4.tcp_keepalive_intvl

## buffer size 
ping #Round trip time
#This is nothing but the amount of time it takes to send a packet to the receiver and the time took to get an acknowledgement from the receiver.  Hence the round trip time is the amount of time it took to send an IP packet and then receive and acknowledgement from the other side. In networking this can be tested with a very highly used command called PING.
#FLow control
#Receive windows (max 64K)
#Bandwidth Delay Product (Windows Scaling)
http://www.speedguide.net/bdp.php
# enable windows Scaling
net.ipv4.tcp_window_scaling = 1
# Scale windows receive size
net.core.rmem_max = 16777216
# scal window send size
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
#The first value is the minimum amount of receive window that will be set to each TCP connection, even if the system is under extreme high pressure.
#The default value allocated to each tcp connection
#The third one is the maximum that can be allocated to a TCP connection
net.ipv4.tcp_wmem = 4096        16384   16777216
# Save your configuration
sysctl -p /etc/sysctl.conf
# or )
sysctl -w "parameter=value"
# do it dynamically
echo '16777216' > /proc/sys/net/core/rmem_max
#Disable slow start
net.ipv4.tcp_slow_start_after_idle = 0

ifconfig interface mtu size
#A maximum transmission unit (MTU) is the largest size packet or frame, specified in octets (eight-bit bytes), that can be sent in a packet- or frame-based network such as the Internet. The Internet's Transmission Control Protocol (TCP) uses the MTU to determine the maximum size of each packet in any transmission.

# Disk and process size....
## Run queue size
sar #vmstat
## see the routes
ip -4 route show
ip -6 route show

iostat -d 1 2 
./ioping -R /dev/sda
# to do above on centos
yum install tar
wget https://ioping.googlecode.com/files/ioping-0.6.tar.gz
tar -xzvf ioping-0.6.tar.gz
make ioping

# find page faults
ps -o min_flt,maj_flext 1
ps -o min_flt,maj_flt,cmd,args,uid,gid 1
ps -eo min_flt,maj_flt,cmd,args,uid,gid | less
top -d 1

### SAR
apt-get install sysstat atsar
edit /etc/default/sysstat and set enable to true
restart - service sysstat restart

sar -B 1 10
#/usr/bin/time -v ls /etc/resolv.conf # needs to be installed first..


#Tweaking /proc/sys/vm: Virtual Memory There are two variables under /proc/sys/vm that you will find very useful in tweaking how the disk buffers and the Linux VM work with your disks and file systems. 

#The first, vm.bdflush, 
#allows you to adjust how the kernel will flush dirty buffers to disk. Disk buffers are used by the kernel to cache data stored on disks, which are very slow compared to RAM. Whenever a buffer becomes sufficiently dirty (i.e., its contents have been changed so that it differs from what is on the disk), the kernel daemon bdflush will flush it to disk. When viewing vm.bdflush you will see several parameters:
# sysctl vm.bdflush
#vm.bdflush = 30 500 0 0 500 3000 60 20 0

#Some of the parameters are dummy values. For now, pay attention to the first, second, and seventh parameters (nfract, ndirty, and nfract_sync, respectively). nfract specifies the maximum percentage of a buffer that bdflush will allow before queuing the buffer to be written to disk. ndirty specifies the maximum buffers that bdflush will flush at once. Finally, nfract_sync is similar to nfract, but once the percentage specified by nfract_sync is reached, a write is forced rather than queued. 
#Adjusting vm.bdflush is something of an art because you need to extensively test the effect on your server and target applications. If the server has an intelligent controller and disk, then decreasing the total number of flushes (which will in turn cause each flush that is done to take a bit longer) may increase overall performance. However, with a slower disk, the system may end up spending more time waiting for the flush to finish. For this tweak, you need to test, test, and then test some more. The default for nfract is 30%, and it's 60% for nfract_sync. When increasing nfract, make sure the new value is not equal to nfract_sync:
# sysctl -w vm.bdflush="60 500 0 0 500 3000 80 20 0"
vm.bdflush = 60 500 0 0 500 3000 80 20 0

#Here, nfract is being set to 60% and nfract_sync to 80%. The ndirty parameter simply specifies how much bdflush will write to disk at any one time. The larger this value, the longer it could potentially take bdflush to complete its updates to disk. You can also tune how many pages of memory are paged out by the kernel swap daemon, kswapd, when memory is needed using vm.kswapd:

# sysctl vm.kswapd
vm.kswapd = 512 32 8
#The vm.kswapd variable has three parameters: tries_base, the maximum number of pages that kswapd tries to free in one round; tries_min, the minimum pages that kswapd will free when writing to disk (in other words, kswapd will try to at least get some work done when it wakes up); and swap_cluster, the number of pages that kswapd will write in one round of paging. The performance tweak, which is similar to the adjustment made to vm.bdflush, is to increase the number of pages that kswapd pages out at once on systems that page often by modifying the first and last parameters:
# sysctl -w vm.kswapd="1024 32 64"
vm.kswapd = 1024 32 64



****************************** Security....
# find all root users... 
awk -F: '($3=="0") {print}' /etc/passwd
# find files with no users


# edit /etc/sudoers
# edit /etc/ssh/sshd_config
find / -xdev \( -nouser -o -nogroup \) -print
find / -perm 
chage -M <days> <users>
## Firewall
UFW 
iptables -A <chain> -j <target>

 The three built-in chains are INPUT, OUTPUT, and FORWARD. These chains are permanent and cannot be deleted. The chain specifies the point at which a packet is manipulated.

The -j <target> option specifies the target of the rule; i.e., what to do if the packet matches the rule. Examples of built-in targets are ACCEPT, DROP, and REJECT. 

## Be very security concisous
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

service iptables save
iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp -m tcp --dport 80 -j REJECT
iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
iptables -I INPUT 1 -i lo -p all -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
sysctl -w net.ipv4.ip_forward=1


***** BOOKS AND REFERENCES
Red Hat Linux Firewalls, by Bill McCarty; Red Hat Press — a comprehensive reference to building network and server firewalls using open source packet filtering technology such as Netfilter and iptables. It includes topics that cover analyzing firewall logs, developing firewall rules, and customizing your firewall using various graphical tools.
Linux Firewalls, by Robert Ziegler; New Riders Press — contains a wealth of information on building firewalls using both 2.2 kernel ipchains as well as Netfilter and iptables. Additional security topics such as remote access issues and intrusion detection systems are also covered.

## either firewalld or iptables or UFW

systemctl enable firewalld
systemctl status firewalld
firewall-cmd --get-active-zones
system-config-selinux
chkconfig --level 345 iptables on
service iptables restart
chkconfig --level 345 iptables on
service ipchains stop
chkconfig --level 345 ipchains off

systemctl stop firewalld
systemctl mask firewalld
systemctl status firewalld
yum install iptables-services -y
systemctl enable iptables
systemctl start iptables
systemctl status iptables
iptables -L
#On Fedora and RHEL/CentOS - the traditional iptables configuration was done in /etc/sysconfig/iptables. With firewalld, it's configuration lives in /etc/firewalld/ and is a set of XML files. Fedora seems to be moving toward firewalld as a replacement for this legacy configuration. I do understand that firewalld uses iptables under the hood, but it also has it's own command line interface and configuration file format as above - which is what I'm referring to in terms of using one vs the other.
sudo head -2 /etc/sysconfig/iptables
#system-config-firewall 
iptables --flush #delete all rules temporarily
service iptables save

/etc/sysconfig/iptables-config

## NMAP For port scanning... 
rpm -vhU https://nmap.org/dist/nmap-7.12-1.x86_64.rpm

Useful links... 
http://www.techrepublic.com/blog/the-enterprise-cloud/calculate-iops-in-a-storage-array/
http://blog.scoutapp.com/articles/2011/02/10/understanding-disk-i-o-when-should-you-be-worried
http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages
https://www.kernel.org/doc/Documentation/sysctl/fs.txt
http://www.thegeekstuff.com/2011/03/sar-examples/?utm_source=feedburner

## Sar file 
/etc/cron.d/sysstat
/etc/default/sysstat
/var/log/sysstat - (this will change based on OS)
### INstalling SAR
apt-get install sysstat